From 82df415c3bcdd7304dcbd2a1385a6d80bebab1ad Mon Sep 17 00:00:00 2001
From: Zen <z@pyl.onl>
Date: Sat, 1 Feb 2025 10:37:41 -0600
Subject: [PATCH 22/47] add basic net module

Signed-off-by: Zen <z@pyl.onl>
---
 src/ugrd/net/dhcpcd.py   | 14 ++++++++
 src/ugrd/net/dhcpcd.toml |  8 +++++
 src/ugrd/net/net.py      | 74 ++++++++++++++++++++++++++++++++++++++++
 src/ugrd/net/net.toml    | 19 +++++++++++
 src/ugrd/net/static.py   | 63 ++++++++++++++++++++++++++++++++++
 src/ugrd/net/static.toml | 21 ++++++++++++
 src/ugrd/net/vlan.toml   |  2 ++
 7 files changed, 201 insertions(+)
 create mode 100644 src/ugrd/net/dhcpcd.py
 create mode 100644 src/ugrd/net/dhcpcd.toml
 create mode 100644 src/ugrd/net/net.py
 create mode 100644 src/ugrd/net/net.toml
 create mode 100644 src/ugrd/net/static.py
 create mode 100644 src/ugrd/net/static.toml
 create mode 100644 src/ugrd/net/vlan.toml

diff --git a/src/ugrd/net/dhcpcd.py b/src/ugrd/net/dhcpcd.py
new file mode 100644
index 0000000..3a00933
--- /dev/null
+++ b/src/ugrd/net/dhcpcd.py
@@ -0,0 +1,14 @@
+__version__ = "0.2.1"
+
+
+from zenlib.util import contains
+
+
+@contains("net_device", "net_device must be set", raise_exception=True)
+def init_dhcpcd(self) -> str:
+    """Return shell lines to start dhcpcd"""
+    return f"""
+    net_device=$(resolve_mac {self.net_device_mac})
+    einfo "Starting dhcpcd on: $net_device"
+    einfo "dhcpcd output:\n$(dhcpcd "$net_device" 2>&1)"
+    """
diff --git a/src/ugrd/net/dhcpcd.toml b/src/ugrd/net/dhcpcd.toml
new file mode 100644
index 0000000..3abaa98
--- /dev/null
+++ b/src/ugrd/net/dhcpcd.toml
@@ -0,0 +1,8 @@
+modules = [ "ugrd.net.net" ]
+binaries = [ "dhcpcd" ]
+
+[imports.init_pre]
+"ugrd.net.dhcpcd" = [ "init_dhcpcd" ]
+
+[import_order.after]
+"init_dhcpcd" = "load_modules"
diff --git a/src/ugrd/net/net.py b/src/ugrd/net/net.py
new file mode 100644
index 0000000..1b429bb
--- /dev/null
+++ b/src/ugrd/net/net.py
@@ -0,0 +1,74 @@
+__version__ = "0.1.0"
+
+from json import loads
+from pathlib import Path
+
+from zenlib.util import colorize, contains, unset
+
+from .. import AutodetectError
+
+
+def _process_net_device(self, net_device: str):
+    """Sets self.net_device to the given net_device."""
+    _validate_net_device(self, net_device)
+    self.data["net_device"] = net_device
+    self["net_device_mac"] = (Path("/sys/class/net") / net_device / "address").read_text().strip()
+
+
+def _validate_net_device(self, net_device: str):
+    """Validates the given net_device."""
+    if not net_device:  # Ensure the net_device is not empty
+        raise ValueError("net_device must not be empty")
+    dev_path = Path("/sys/class/net") / net_device
+    if not dev_path.exists():  # Ensure the net_device exists on the system
+        self.logger.error("Network devices: %s", ", ".join([dev.name for dev in Path("/sys/class/net").iterdir()]))
+        raise ValueError("Invalid net_device: %s" % net_device)
+    if not (dev_path / "address").exists():
+        raise ValueError("Invalid net_device, missing MAC address: %s" % net_device)
+
+
+@contains("hostonly")
+def autodetect_net_device_kmods(self):
+    """Autodetects the driver for the net_device."""
+    device_path = Path("/sys/class/net") / self["net_device"] / "device"
+    if not device_path.exists():
+        raise AutodetectError("Unable to determine device driver for device: %s" % self["net_device"])
+
+    driver_path = Path("/sys/class/net") / self["net_device"] / "device" / "driver"
+    if driver_path.is_symlink():
+        driver_name = driver_path.resolve().name
+        self.logger.info("Autodetected net_device_driver: %s" % colorize(driver_name, "cyan"))
+        self["kmod_init"] = driver_name
+    else:
+        raise AutodetectError("Unable to determine device driver for device: %s" % self["net_device"])
+
+
+@unset("net_device", log_level=40)
+@contains("hostonly")
+def autodetect_net_device(self):
+    """Sets self.net_device to the device used for the default route with the lowest metric."""
+    routes = loads(self._run(["ip", "-j", "r"]).stdout.decode())
+
+    gateways = {}
+    for route in routes:
+        if route["dst"] == "default":
+            gateways[route["metric"]] = route
+
+    if not gateways:
+        raise AutodetectError("No default route found")
+
+    self["net_device"] = gateways[min(gateways.keys())]["dev"]
+    self.logger.info("Autodetected net_device: %s" % colorize(self["net_device"], "cyan"))
+
+
+def resolve_mac(self):
+    """Returns a shell script to resolve a MAC address to a deviec name"""
+    return """
+    for dev in /sys/class/net/*; do
+        if [ "$(cat $dev/address)" == "$1" ]; then
+            printf "%s" "${dev##*/}"
+            return
+        fi
+    done
+    rd_fail "Unable to resolve MAC address to device name: $1"
+    """
diff --git a/src/ugrd/net/net.toml b/src/ugrd/net/net.toml
new file mode 100644
index 0000000..be12f71
--- /dev/null
+++ b/src/ugrd/net/net.toml
@@ -0,0 +1,19 @@
+binaries = [ "ip" ]
+
+kmod_ignore_network = false
+
+[imports.config_processing]
+"ugrd.net.net" = [ "_process_net_device" ] 
+
+[imports.functions]
+"ugrd.net.net" = [ "resolve_mac" ]
+
+[imports.build_enum]
+"ugrd.net.net" = [ "autodetect_net_device" ]
+
+[imports.build_pre]
+"ugrd.net.net" = [ "autodetect_net_device_kmods" ]
+
+[custom_parameters]
+net_device = "str"  # The primary network device to use for network operations
+net_device_mac = "str"  # The MAC address of the primary network device
diff --git a/src/ugrd/net/static.py b/src/ugrd/net/static.py
new file mode 100644
index 0000000..76548cc
--- /dev/null
+++ b/src/ugrd/net/static.py
@@ -0,0 +1,63 @@
+__version__ = "0.2.0"
+
+from json import loads
+
+from zenlib.util import colorize, contains, unset
+
+from .. import AutodetectError
+
+
+@unset("ip_gateway")
+@contains("autodetect_gateway")
+@contains("hostonly")
+def autodetect_gateway(self):
+    """Detects the default route and sets ip_gateway accordingly.
+    Returns the device name of the default route.
+    """
+    routes = loads(self._run(["ip", "-j", "r"]).stdout.decode())
+
+    for route in routes:
+        if route["dev"] == self["net_device"]:
+            self["ip_gateway"] = route["gateway"]
+            return self.logger.info(
+                "[%s] Detected gateway: %s", colorize(self["net_device"], "blue"), colorize(self["ip_gateway"], "cyan")
+            )
+    else:
+        raise AutodetectError("No default route found")
+
+
+@unset("ip_address")
+@contains("autodetect_ip")
+@contains("hostonly")
+def autodetect_ip(self):
+    """Autodetects the ip address of the network device if not already set."""
+    device_info = loads(self._run(["ip", "-d", "-j", "a", "show", self["net_device"]]).stdout.decode())[0]
+    if "vlan" == device_info.get("linkinfo", {}).get("info_kind"):  # enable the VLAN module to handle vlans
+        self.logger.info("[%s] VLAN detected, enabling the VLAN module.", colorize(self["net_device"], "blue"))
+        self["modules"] = "ugrd.net.vlan"
+    ip_addr = device_info["addr_info"][0]["local"]
+    ip_cidr = device_info["addr_info"][0]["prefixlen"]
+    self["ip_address"] = f"{ip_addr}/{ip_cidr}"
+    self.logger.info(
+        "[%s] Detected ip address: %s", colorize(self["net_device"], "blue"), colorize(self["ip_address"], "cyan")
+    )
+
+
+@contains("ip_address", "ip_address must be set", raise_exception=True)
+@contains("ip_gateway", "ip_gateway must be set", raise_exception=True)
+@contains("net_device", "net_device must be set", raise_exception=True)
+def init_net(self) -> str:
+    """Returns shell lines to initialize the network device.
+    Skips the initialization if the device is already up, and there is a gateway on the device.
+    """
+    return f"""
+    net_device=$(resolve_mac {self.net_device_mac})
+    if ip link show "$net_device" | grep -q 'UP,' && ip route show | grep -q "default via .* dev $net_device"; then
+        ewarn "Network device is already up, skipping: $net_device"
+        return
+    fi
+    einfo "Configuring network device: $net_device"
+    ip link set "$net_device" up
+    ip addr add {self.ip_address} dev "$net_device"
+    ip route add default via {self.ip_gateway}
+    """
diff --git a/src/ugrd/net/static.toml b/src/ugrd/net/static.toml
new file mode 100644
index 0000000..897ef5a
--- /dev/null
+++ b/src/ugrd/net/static.toml
@@ -0,0 +1,21 @@
+modules = [ "ugrd.net.net" ]
+
+autodetect_ip = true
+autodetect_gateway = true
+
+[imports.build_pre]
+"ugrd.net.static" = [ "autodetect_gateway", "autodetect_ip" ]
+
+[imports.init_pre]
+"ugrd.net.static" = [ "init_net" ]
+
+[import_order.after]
+"autodetect_gateway" = "autodetect_net_device"
+"autodetect_ip" = "autodetect_gateway"
+"init_net" = [ "load_modules", "init_dhcpcd" ]
+
+[custom_parameters]
+autodetect_ip = "bool"  # Autodetect IP address from the default gateway
+autodetect_gateway = "bool"  # Autodetect default gateway from the IP address
+ip_address = "str"  # IP address to use for the static configuration, with cidr
+ip_gateway = "str"  # Default gateway to set
diff --git a/src/ugrd/net/vlan.toml b/src/ugrd/net/vlan.toml
new file mode 100644
index 0000000..a235fac
--- /dev/null
+++ b/src/ugrd/net/vlan.toml
@@ -0,0 +1,2 @@
+modules = [ "ugrd.net.net" ]
+
-- 
2.48.1

