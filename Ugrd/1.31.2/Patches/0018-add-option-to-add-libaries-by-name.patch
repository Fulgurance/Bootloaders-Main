From 324a39133180012ca597b09211242e317c1f1ccc Mon Sep 17 00:00:00 2001
From: Zen <z@pyl.onl>
Date: Fri, 31 Jan 2025 10:28:48 -0600
Subject: [PATCH 18/50] add option to add libaries by name

Signed-off-by: Zen <z@pyl.onl>
---
 docs/configuration.md   |  1 +
 src/ugrd/base/core.py   | 31 ++++++++++++++++++++++++++++++-
 src/ugrd/base/core.toml |  2 ++
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/docs/configuration.md b/docs/configuration.md
index 28add7a..0857a7f 100644
--- a/docs/configuration.md
+++ b/docs/configuration.md
@@ -47,6 +47,7 @@ Modules write to a shared config dict that is accessible by other modules.
 * `clean` (true) forces the build dir to be cleaned on each run.
 * `old_count` (1) Sets the number of old file to keep when running the `_rotate_old` function.
 * `binaries` - A list used to define programs to be pulled into the initrams. `which` is used to find the path of added entries, and `lddtree` is used to resolve dependendies.
+* `libraries` - A list of libaries searched for and added to the initramfs, by name.
 * `paths` - A list of directores to create in the `build_dir`. They do not need a leading `/`.
 * `shell` (/bin/sh) Sets the shell to be used in the init script.
 
diff --git a/src/ugrd/base/core.py b/src/ugrd/base/core.py
index 8812b42..801acb2 100644
--- a/src/ugrd/base/core.py
+++ b/src/ugrd/base/core.py
@@ -1,5 +1,5 @@
 __author__ = "desultory"
-__version__ = "4.1.3"
+__version__ = "4.2.0"
 
 from os import environ, makedev, mknod
 from pathlib import Path
@@ -108,6 +108,23 @@ def calculate_dependencies(self, binary: str) -> list[Path]:
     return dependency_paths
 
 
+def find_library(self, library: str) -> None:
+    """Given a library file name, searches for it in the library paths, adds it to the dependencies list."""
+    search_paths = set(self["library_paths"]) | {"/lib", "/lib64", "/usr/lib", "/usr/lib64"}
+
+    for path in search_paths:
+        lib_path = Path(path).joinpath(library)
+        if lib_path.exists():
+            self.logger.info("[%s] Found library file: %s" % (library, colorize(lib_path, "cyan")))
+            return lib_path
+        # Attempt to find the library with a .so extension
+        lib_path = lib_path.with_suffix(".so")
+        if lib_path.exists():
+            self.logger.info("[%s] Found library file: %s" % (library, colorize(lib_path, "cyan")))
+            return lib_path
+    raise AutodetectError("Library not found: %s" % library)
+
+
 @contains("merge_usr", "Skipping /usr merge", log_level=30)
 def handle_usr_symlinks(self) -> None:
     """
@@ -293,6 +310,18 @@ def _process_paths_multi(self, path: Union[Path, str]) -> None:
     self["paths"].append(path)
 
 
+def _process_libraries_multi(self, library: Union[str]) -> None:
+    """Prociesses libraries into the libraries list, adding the parent directory to the library paths."""
+    if library in self["libraries"]:
+        return self.logger.debug("Library already in libraries list, skipping: %s" % library)
+
+    self.logger.debug("Processing library: %s" % library)
+    library_path = find_library(self, library)
+    self["libraries"].append(library)
+    self["dependencies"] = library_path
+    self["library_paths"] = str(library_path.parent)
+
+
 def _process_binaries_multi(self, binary: str) -> None:
     """Processes binaries into the binaries list, adding dependencies along the way."""
     if binary in self["binaries"]:
diff --git a/src/ugrd/base/core.toml b/src/ugrd/base/core.toml
index 298f4d3..e02b2dc 100644
--- a/src/ugrd/base/core.toml
+++ b/src/ugrd/base/core.toml
@@ -20,6 +20,7 @@ minor = 1
 "ugrd.base.core" = [ "_process_build_logging",
 		     "_process_out_file",
 		     "_process_binaries_multi",
+		     "_process_libraries_multi",
 		     "_process_dependencies_multi",
 		     "_process_opt_dependencies_multi",
 		     "_process_xz_dependencies_multi",
@@ -68,6 +69,7 @@ xz_dependencies = "NoDupFlatList"  # XZipped dependencies property, used to defi
 gz_dependencies = "NoDupFlatList"  # GZipped dependencies property, used to define the gzipped dependencies (will be extracted)
 library_paths = "NoDupFlatList"  # library_paths property, used to define the library paths to add to LD_LIBRARY_PATH
 find_libgcc = "bool"  # If true, the initramfs will search for libgcc_s.so.1 and add it to the initramfs
+libraries = "NoDupFlatList"  # Additional libraries, by name, added to the initramfs
 binaries = "NoDupFlatList"  # Binaries which should be included in the intiramfs, dependencies resolved with lddtree
 copies = "dict"  # Copies dict, defines the files to be copied to the initramfs
 nodes = "dict"  # Nodes dict, defines the device nodes to be created
-- 
2.48.1

