From 625c03b80c483015a6864aead0e786ef46f19f57 Mon Sep 17 00:00:00 2001
From: Zen <z@pyl.onl>
Date: Sat, 25 Jan 2025 12:10:45 -0600
Subject: [PATCH 03/58] add before/after hook implementation

Signed-off-by: Zen <z@pyl.onl>
---
 docs/dev_manual.md              | 10 ++++
 src/ugrd/base/checks.py         | 30 +++++++++++
 src/ugrd/base/checks.toml       |  2 +-
 src/ugrd/initramfs_dict.py      | 73 +++++++++++++++++++++++----
 src/ugrd/initramfs_generator.py | 89 ++++++++++++++++++++++++++++++++-
 5 files changed, 191 insertions(+), 13 deletions(-)

diff --git a/docs/dev_manual.md b/docs/dev_manual.md
index 2e64eeb..c209e0d 100644
--- a/docs/dev_manual.md
+++ b/docs/dev_manual.md
@@ -18,6 +18,16 @@ UGRD allows python functions to be imported from modules using the `imports` dic
 
 `imports` entries have a key which is the name of the hook to import into, and a value which is a dict of module names and lists of functions to import.
 
+## Import order
+
+Imports can be ordered using the `import_order` dict.
+
+The key name defined in `before` will be run before values in the `after` list (value) by name.
+
+Likewise, keys in the `after` list will be run after the key in the `before` value.
+
+> `after` targets are moved before the key when creating the hook order, not literally after.
+
 ### Import types
 
 There are two primary categories for imports, `build` and `init`. Build imports are used to mutate the config and build the base structure of the initramfs, while init imports are used to generate the init scripts.
diff --git a/src/ugrd/base/checks.py b/src/ugrd/base/checks.py
index 4c6d008..6006eb8 100644
--- a/src/ugrd/base/checks.py
+++ b/src/ugrd/base/checks.py
@@ -70,3 +70,33 @@ def check_included_or_mounted(self):
                 self.logger.error("File detected under mount '%s' but is not present: %s" % (mountpoint, file))
 
     return "All included files were found."
+
+
+def check_init_order(self):
+    """Ensures that init functions are ordered respecting import_order"""
+    for hook, hook_funcs in self["imports"].items():  # Iterate through all imported functions
+        if hook == "custom_init":
+            continue  # Only one function should be in herE
+        hook_funcs = [func.__name__ for func in hook_funcs]
+        a = self["import_order"].get("after", {})
+        after = {k: v for k, v in a.items() if k in hook_funcs and any(subv in hook_funcs for subv in v)}
+        b = self["import_order"].get("before", {})
+        before = {k: v for k, v in b.items() if k in hook_funcs and any(subv in hook_funcs for subv in v)}
+        for func, targets in before.items():
+            for target in targets:
+                func_index = hook_funcs.index(func)
+                try:
+                    target_index = hook_funcs.index(target)
+                except ValueError:
+                    continue  # Ignore targets that are not imported
+                if func_index > target_index:
+                    raise ValidationError("[%s] Function must be before: %s" % (func, target))
+        for func, targets in after.items():
+            for target in targets:
+                func_index = hook_funcs.index(func)
+                try:
+                    target_index = hook_funcs.index(target)
+                except ValueError:
+                    continue  # Ignore targets that are not imported
+                if func_index < target_index:
+                    raise ValidationError("[%s] Function must be after: %s" % (func, target))
diff --git a/src/ugrd/base/checks.toml b/src/ugrd/base/checks.toml
index ac09b32..fad054c 100644
--- a/src/ugrd/base/checks.toml
+++ b/src/ugrd/base/checks.toml
@@ -1,7 +1,7 @@
 check_included_funcs = true
 
 [imports.checks]
-"ugrd.base.checks" = [ "check_included_funcs", "check_in_file", "check_included_or_mounted" ]
+"ugrd.base.checks" = [ "check_init_order", "check_included_funcs", "check_in_file", "check_included_or_mounted" ]
 
 [custom_parameters]
 check_included_funcs = 'bool'  # Checks that all included functions are in the profile
diff --git a/src/ugrd/initramfs_dict.py b/src/ugrd/initramfs_dict.py
index cc8ed43..136b0c7 100644
--- a/src/ugrd/initramfs_dict.py
+++ b/src/ugrd/initramfs_dict.py
@@ -7,6 +7,7 @@ from importlib.util import module_from_spec, spec_from_file_location
 from pathlib import Path
 from queue import Queue
 from tomllib import TOMLDecodeError, load
+from typing import Callable
 
 from zenlib.logging import loggify
 from zenlib.types import NoDupFlatList
@@ -31,6 +32,7 @@ class InitramfsConfigDict(UserDict):
     builtin_parameters = {
         "modules": NoDupFlatList,  # A list of the names of modules which have been loaded, mostly used for dependency checking
         "imports": dict,  # A dict of functions to be imported into the initramfs, under their respective hooks
+        "import_order": dict,  # A dict containing order requirements for imports
         "validated": bool,  # A flag to indicate if the config has been validated, mostly used for log levels
         "custom_parameters": dict,  # Custom parameters loaded from imports
         "custom_processing": dict,  # Custom processing functions which will be run to validate and process parameters
@@ -45,6 +47,7 @@ class InitramfsConfigDict(UserDict):
                 self.data[parameter] = default_type(no_warn=True, _log_bump=5, logger=self.logger)
             else:
                 self.data[parameter] = default_type()
+        self["import_order"] = {"before": {}, "after": {}}
         if not NO_BASE:
             self["modules"] = "ugrd.base.base"
         else:
@@ -191,20 +194,70 @@ class InitramfsConfigDict(UserDict):
                 self.logger.debug("[%s] Processing queued value: %s" % (parameter_name, value))
             self[parameter_name] = value
 
+
+    def _process_import_order(self, import_order: dict) -> None:
+        """Processes the import order, setting the order requirements for import functions.
+        Ensures the order type is valid (before, after),
+        that the function is not ordered after itself.
+        Ensures that the same function/target is not in another order type.
+        """
+        self.logger.debug("Processing import order:\n%s" % pretty_print(import_order))
+        order_types = ["before", "after"]
+        for order_type, order_dict in import_order.items():
+            if order_type not in order_types:
+                raise ValueError("Invalid import order type: %s" % order_type)
+            for function in order_dict:
+                targets = order_dict[function]
+                if not isinstance(targets, list):
+                    targets = [targets]
+                if function in targets:
+                    raise ValueError("Function cannot be ordered after itself: %s" % function)
+                for other_target in[self["import_order"].get(ot, {}) for ot in order_types if ot != order_type]:
+                    if function in other_target and any(target in other_target[function] for target in targets):
+                        raise ValueError("Function cannot be ordered in multiple types: %s" % function)
+                order_dict[function] = targets
+
+            if order_type not in self["import_order"]:
+                self["import_order"][order_type] = {}
+            self["import_order"][order_type].update(order_dict)
+
+        self.logger.debug("Registered import order requirements: %s" % import_order)
+
+    def _process_import_functions(self, module, functions: list) -> list[Callable]:
+        """Processes defined import functions, importing them and adding them to the returned list.
+        the 'function' key is required if dicts are used,
+        'before' and 'after' keys can be used to specify order requirements."""
+        function_list = []
+        for f in functions:
+            match type(f).__name__:
+                case "str":
+                    function_list.append(getattr(module, f))
+                case "dict":
+                    if "function" not in f:
+                        raise ValueError("Function key not found in import dict: %s" % functions)
+                    func = f["function"]
+                    function_list.append(getattr(module, func))
+                    if "before" in f:
+                        self["import_order"] = {"before": {func: f["before"]}}
+                    if "after" in f:
+                        self["import_order"] = {"after": {func: f["after"]}}
+                case _:
+                    raise ValueError("Invalid type for import function: %s" % type(f))
+        return function_list
+
     @handle_plural
     def _process_imports(self, import_type: str, import_value: dict) -> None:
         """Processes imports in a module, importing the functions and adding them to the appropriate list."""
-
         for module_name, function_names in import_value.items():
             self.logger.debug("[%s]<%s> Importing module functions : %s" % (module_name, import_type, function_names))
-            try:
+            try:  # First, the module must be imported, so its functions can be accessed
                 module = import_module(module_name)
             except ModuleNotFoundError as e:
                 module_path = Path("/var/lib/ugrd/" + module_name.replace(".", "/")).with_suffix(".py")
                 self.logger.debug("Attempting to sideload module from: %s" % module_path)
                 if not module_path.exists():
                     raise ModuleNotFoundError("Module not found: %s" % module_name) from e
-                try:
+                try:  # If the module is not built in, try to lade it from /var/lib/ugrd
                     spec = spec_from_file_location(module_name, module_path)
                     module = module_from_spec(spec)
                     spec.loader.exec_module(module)
@@ -215,13 +268,12 @@ class InitramfsConfigDict(UserDict):
             if "_module_name" in dir(module) and module._module_name != module_name:
                 self.logger.warning("Module name mismatch: %s != %s" % (module._module_name, module_name))
 
-            function_list = [getattr(module, function_name) for function_name in function_names]
-
-            if import_type not in self["imports"]:
+            if import_type not in self["imports"]:  # Import types are only actually created when needed
                 self.logger.log(5, "Creating import type: %s" % import_type)
                 self["imports"][import_type] = NoDupFlatList(_log_bump=10, logger=self.logger)
 
-            if import_type == "custom_init":
+            function_list = self._process_import_functions(module, function_names)
+            if import_type == "custom_init":  # Only get the first function for custom init (should be 1)
                 if self["imports"]["custom_init"]:
                     raise ValueError("Custom init function already defined: %s" % self["imports"]["custom_init"])
                 else:
@@ -231,21 +283,22 @@ class InitramfsConfigDict(UserDict):
                     )
                     continue
 
-            if import_type == "funcs":
+            if import_type == "funcs":  # Check for collisions with defined binaries and functions
                 for function in function_list:
                     if function.__name__ in self["imports"]["funcs"]:
                         raise ValueError("Function '%s' already registered" % function.__name__)
                     if function.__name__ in self["binaries"]:
                         raise ValueError("Function collides with defined binary: %s'" % function.__name__)
 
+            # Append the functions to the appropriate list
             self["imports"][import_type] += function_list
             self.logger.debug("[%s] Updated import functions: %s" % (import_type, function_list))
 
-            if import_type == "config_processing":
+            if import_type == "config_processing":  # Register the functions for processing after all imports are done
                 for function in function_list:
                     self["custom_processing"][function.__name__] = function
                     self.logger.debug("Registered config processing function: %s" % function.__name__)
-                    self._process_unprocessed(function.__name__.removeprefix("_process_"))
+                    self._process_unprocessed(function.__name__.removeprefix("_process_"))  # Re-process any queued values
 
     @handle_plural
     def _process_modules(self, module: str) -> None:
diff --git a/src/ugrd/initramfs_generator.py b/src/ugrd/initramfs_generator.py
index 714129e..ae39d34 100644
--- a/src/ugrd/initramfs_generator.py
+++ b/src/ugrd/initramfs_generator.py
@@ -124,6 +124,7 @@ class InitramfsGenerator(GeneratorHelpers):
 
             if isinstance(function_output, str) and "\n" in function_output:
                 from textwrap import dedent
+
                 function_output = dedent(function_output)
                 function_output = [  # If the output string has a newline, split and get rid of empty lines
                     line for line in function_output.split("\n") if line and line != "\n" and not line.isspace()
@@ -147,16 +148,100 @@ class InitramfsGenerator(GeneratorHelpers):
         else:
             self.logger.debug("[%s] Function returned no output" % function.__name__)
 
+    def sort_hook_functions(self, hook: str) -> None:
+        """Sorts the functions for the specified hook based on the import order.
+        "before" functions are moved before the target function,
+        "after" functions' target function is moved before the current function.
+
+        Filters orders which do not contain functions or targets in the current hook.
+        """
+        func_names = [func.__name__ for func in self["imports"].get(hook, [])]
+        if not func_names:
+            return self.logger.debug("No functions for hook: %s" % hook)
+
+        b = self["import_order"].get("before", {})
+        before = {k: v for k, v in b.items() if k in func_names and any(subv in func_names for subv in b[k])}
+        a = self["import_order"].get("after", {})
+        after = {k: v for k, v in a.items() if k in func_names and any(subv in func_names for subv in a[k])}
+
+        if not before and not after:
+            return self.logger.debug("No import order specified for hook: %s" % hook)
+
+        def iter_order(order, direction):
+            # Iterate over all before/after functions
+            # If the function is not in the correct position, move it
+            # Use the index of the function to determine the position
+            # Move the function in the imports list as well
+            changed = False
+
+            for func_name, other_funcs in order.items():
+                func_index = func_names.index(func_name)
+                assert func_index >= 0, "Function not found in import list: %s" % func_name
+                for other_func in other_funcs:
+                    try:
+                        other_index = func_names.index(other_func)
+                    except ValueError:
+                        continue
+                    assert other_index >= 0, "Function not found in import list: %s" % other_func
+
+                    def reorder_func(direction):
+                        """ Reorders the function based on the direction. """
+                        self.logger.debug("Moving %s %s %s" % (func_name, direction, other_func))
+                        if direction == "before":  # Move the function before the other function
+                            self.logger.debug("[%s] Moving function before: %s" % (func_name, other_func))
+                            func_names.insert(other_index, func_names.pop(func_index))
+                            self["imports"][hook].insert(other_index, self["imports"][hook].pop(func_index))
+                        elif direction == "after":  # Move the other function before the current function
+                            self.logger.debug("[%s] Moving function before: %s" % (other_func, func_name))
+                            func_names.insert(func_index, func_names.pop(other_index))
+                            self["imports"][hook].insert(func_index, self["imports"][hook].pop(other_index))
+                        else:
+                            raise ValueError("Invalid direction: %s" % direction)
+
+                    self.logger.log(5, "[%s] Imports:\n%s", hook, ", ".join(i.__name__ for i in self["imports"][hook]))
+                    if direction == "before":  # func_index should be before other_index
+                        if func_index > other_index:  # If the current function is after the other function
+                            reorder_func("before")  # Move the current function before the other function)
+                            changed = True
+                        else:  # Log otherwise
+                            self.logger.log(5, "Function %s already before: %s" % (func_name, other_func))
+                    elif direction == "after":  # func_index should be after other_index
+                        if func_index < other_index:  # If the current function is before the other function
+                            reorder_func("after")  # Move the current function after the other function
+                            changed = True
+                        else:
+                            self.logger.log(5, "Function %s already after: %s" % (func_name, other_func))
+                    else:
+                        raise ValueError("Invalid direction: %s" % direction)
+            return changed
+
+        max_iterations = len(func_names) * (len(before) + 1) * (len(after) + 1)  # Prevent infinite loops
+        iterations = max_iterations
+        while iterations:
+            iterations -= 1
+            if not any([iter_order(before, "before"), iter_order(after, "after")]):
+                self.logger.debug("[%s] Import order converged after %s iterations" % (hook, max_iterations - iterations))
+                break  # Keep going until no changes are made
+        else:
+            self.logger.error("Import list: %s" % func_names)
+            self.logger.error("Before: %s" % before)
+            self.logger.error("After: %s" % after)
+            raise ValueError("Import order did not converge after %s iterations" % max_iterations)
+
     def run_hook(self, hook: str, *args, **kwargs) -> list[str]:
-        """Runs a hook for imported functions."""
+        """Runs all functions for the specified hook.
+        If the function is masked, it will be skipped.
+        If the function is in import_order, handle the ordering
+        """
+        self.sort_hook_functions(hook)
         out = []
         for function in self["imports"].get(hook, []):
-            # Check that the function is not masked
             if function.__name__ in self["masks"].get(hook, []):
                 self.logger.warning(
                     "[%s] Skipping masked function: %s" % (hook, colorize(function.__name__, "yellow", bold=True))
                 )
                 continue
+
             if function_output := self.run_func(function, *args, **kwargs):
                 out.append(function_output)
         return out
-- 
2.48.1

